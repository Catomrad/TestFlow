// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  username     String          @unique
  password     String
  role         String          @default("user")
  createdAt    DateTime        @default(now())
  memberships  ProjectMember[]
  testPlans    TestPlan[]
  testCases    TestCase[]
  flowcharts   Flowchart[]
  projects     Project[]       @relation("ProjectCreator")
  bugReports   BugReport[]     @relation("BugReportCreator")
  testRuns     TestRun[]       @relation("TestRunResponsible")
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  createdAt   DateTime        @default(now())
  creatorId   Int?
  creator     User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull, name: "ProjectCreator")
  members     ProjectMember[] @relation("ProjectMembers")
  testPlans   TestPlan[]
  testCases   TestCase[]
  flowcharts  Flowchart[]     @relation("ProjectFlowcharts")
  modules     Module[]
  bugReports  BugReport[]
  testRuns    TestRun[]
}

model ProjectMember {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  role      String // "creator", "admin", "user"
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, name: "ProjectMembers")

  @@unique([userId, projectId])
}

model Module {
  id        Int       @id @default(autoincrement())
  name      String
  projectId Int
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testCases TestCase[]
}

model TestPlan {
  id              String           @id @default(uuid())
  name            String
  description     String
  softwareVersion String?
  projectId       Int
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId       Int?
  creator         User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  createdAt       DateTime         @default(now())
  testCases       TestPlanTestCase[]
  testRuns        TestRun[]
}

model TestCase {
  id           String           @id @default(uuid())
  title        String
  priority     String
  class        String
  moduleId     Int
  module       Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  status       String
  template     String
  requiredTime Json
  content      String
  description  String
  projectId    Int
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId    Int?
  creator      User?            @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  createdAt    DateTime         @default(now())
  testPlans    TestPlanTestCase[]
  bugReports   BugReport[]      @relation("BugReportTestCase")
}

model TestPlanTestCase {
  testPlanId String
  testCaseId String
  testPlan   TestPlan @relation(fields: [testPlanId], references: [id], onDelete: Cascade)
  testCase   TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@id([testPlanId, testCaseId])
}

model Flowchart {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  projectId Int
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, name: "ProjectFlowcharts")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BugReport {
  id          String    @id @default(uuid())
  title       String
  environment String // "windows", "linux", "android", "ios"
  version     String
  priority    String // "high", "medium", "low"
  frequency   String // "always", "very_often", "often", "rarely"
  content     String // объединенные stepsToReproduce, expectedResult, actualResult
  template    String
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   Int?
  creator     User?     @relation(fields: [creatorId], references: [id], onDelete: SetNull, name: "BugReportCreator")
  testCaseId  String?
  testCase    TestCase? @relation(fields: [testCaseId], references: [id], onDelete: SetNull, name: "BugReportTestCase")
  createdAt   DateTime  @default(now())
}

model TestRun {
  id              String    @id @default(uuid())
  title           String
  content         String
  status          String // "planned", "in_progress", "completed", "rejected"
  plannedDate     DateTime
  completionDate  DateTime?
  projectId       Int
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testPlanId      String?
  testPlan        TestPlan? @relation(fields: [testPlanId], references: [id], onDelete: SetNull)
  responsibleId   Int
  responsible     User      @relation(fields: [responsibleId], references: [id], onDelete: Cascade, name: "TestRunResponsible")
  createdAt       DateTime  @default(now())
}