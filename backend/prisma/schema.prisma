// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int             @id @default(autoincrement())
  username    String          @unique
  password    String
  role        String          @default("user")
  createdAt   DateTime        @default(now())
  memberships ProjectMember[]
  testPlans   TestPlan[]
  testCases   TestCase[]
  flowcharts  Flowchart[]
  Project     Project[]
}

model Project {
  id         Int             @id @default(autoincrement())
  name       String
  createdAt  DateTime        @default(now())
  creatorId  Int?
  creator    User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  members    ProjectMember[] @relation("ProjectMembers")
  testPlans  TestPlan[]      @relation("ProjectTestPlans")
  flowcharts Flowchart[]     @relation("ProjectFlowcharts")

  TestPlan TestPlan[]

  TestCase TestCase[]
}

model ProjectMember {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  role      String // "creator", "admin", "user"
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, name: "ProjectMembers")

  @@unique([userId, projectId])
}

model TestPlan {
  id          String   @id @default(uuid())
  name        String
  description String
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   Int?
  creator     User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())

  Project Project[] @relation("ProjectTestPlans")
}

model TestCase {
  id           String   @id @default(uuid())
  title        String
  priority     String
  class        String
  module       String
  status       String
  template     String
  requiredTime Json
  content      String
  description  String
  projectId    Int
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId    Int?
  creator      User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now())
}

model Flowchart {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  projectId Int
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, name: "ProjectFlowcharts")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
